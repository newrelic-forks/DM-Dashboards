{
  "template" : {
    "title" : "ElasticsearchNodeSample",
    "filter" : { },
    "widgets" : [ {
      "name" : "Running_GET_requests_and_Missing_requests",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 6,
        "x" : 0,
        "y" : 0
      },
      "props" : {
        "type" : "area",
        "title" : "Running GET requests and Missing requests",
        "hint" : "The number of get requests currently running and the number of get requests where the document was missing",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`elasticsearch.node.get.currentRequestsRunning`) as 'Running', average(`elasticsearch.node.get.requestsDocumentMissing`) as 'Missing' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    }, {
      "name" : "Total_I/O_operations",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 6,
        "x" : 6,
        "y" : 0
      },
      "props" : {
        "type" : "area",
        "title" : "Total I/O operations",
        "hint" : "The total I/O operations on the file store.",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`elasticsearch.node.fs.ioOperations`) as 'I/O operations' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    }, {
      "name" : "Documents_currently_being_indexed_and_deleted",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 4,
        "x" : 0,
        "y" : 3
      },
      "props" : {
        "type" : "line",
        "title" : "Documents currently being indexed and deleted",
        "hint" : "The number of documents currently being indexed and deleted to an index.",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`elasticsearch.node.indexing.documentsCurrentlyIndexing`) as 'Indexed',average(`elasticsearch.node.indexing.docsCurrentlyDeleted`) as 'Deleted' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    }, {
      "name" : "Total_documents_indexed_and_deleted",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 4,
        "x" : 4,
        "y" : 3
      },
      "props" : {
        "type" : "area",
        "title" : "Total documents indexed and deleted",
        "hint" : "The number of documents indexed and deleted to an index.",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`elasticsearch.node.indexing.documentsIndexed`) as 'Indexed', average(`elasticsearch.node.indexing.totalDocumentsDeleted`) as 'Deleted' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    }, {
      "name" : "Time_spent_indexing_and_deleting_documents",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 4,
        "x" : 8,
        "y" : 3
      },
      "props" : {
        "type" : "line",
        "title" : "Time spent indexing and deleting documents",
        "hint" : "The time spent indexing and deleting documents from an index in milliseconds.",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`elasticsearch.node.indexing.timeIndexingDocumentsInMilliseconds`) as 'Indexed', average(`elasticsearch.node.indexing.timeDeletingDocumentsInMilliseconds`) as 'Deleted' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    }, {
      "name" : "Query_cache_evictions,_hits_and_misses",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 6,
        "x" : 0,
        "y" : 6
      },
      "props" : {
        "type" : "area",
        "title" : "Query cache evictions, hits and misses",
        "hint" : "The number of query cache evictions, hits and misses.",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`elasticsearch.node.index.queryCacheEvictions`) as 'Evictions', average(`elasticsearch.node.index.queryCacheHits`) as 'Hits', average(`elasticsearch.node.index.queryCacheMisses`) as 'Misses' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    }, {
      "name" : "Shard_source_ongoing_recoveries",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 6,
        "x" : 6,
        "y" : 6
      },
      "props" : {
        "type" : "line",
        "title" : "Shard source ongoing recoveries",
        "hint" : "The number of ongoing recoveries for which a shard serves as a source.",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`elasticsearch.node.index.recoveryOngoingShardSource`) as 'Ongoing recoveries' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    }, {
      "name" : "Doc_merges_across_segments",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 6,
        "x" : 0,
        "y" : 9
      },
      "props" : {
        "type" : "line",
        "title" : "Doc merges across segments",
        "hint" : "The number of documents across segments currently being merged.",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`elasticsearch.node.merges.docsSegmentsMerging`) as 'Documents' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    }, {
      "name" : "Current_active_segment_merges",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 6,
        "x" : 6,
        "y" : 9
      },
      "props" : {
        "type" : "line",
        "title" : "Current active segment merges",
        "hint" : "The number of currently active segment merges.",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`elasticsearch.node.merges.currentActive`) as 'Active segment' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    }, {
      "name" : "Total_garbage_collections_run_by_the_JVM",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 4,
        "x" : 0,
        "y" : 12
      },
      "props" : {
        "type" : "line",
        "title" : "Total garbage collections run by the JVM",
        "hint" : "The number of garbage collections run by the JVM.",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`jvm.gc.collections`) as 'Garbage collections' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    }, {
      "name" : "Memory_currently_used_by_JVM.",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 4,
        "x" : 4,
        "y" : 12
      },
      "props" : {
        "type" : "line",
        "title" : "Memory currently used by JVM.",
        "hint" : "The percentage of memory currently used by the JVM heap as a value between 0 and 1.",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`elasticsearch.node.jvm.mem.heapUsed`) as 'Memory used' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    }, {
      "name" : "Threds_active_in_the_JVM.",
      "renderer" : "vizco",
      "layout" : {
        "height" : 3,
        "width" : 4,
        "x" : 8,
        "y" : 12
      },
      "props" : {
        "type" : "line",
        "title" : "Threads active in the JVM.",
        "hint" : "The number of active threads in the JVM.",
        "query" : {
          "account_id" : "{{entity.accountId}}",
          "nrql" : "SELECT average(`elasticsearch.node.jvm.threadsActive`) as 'Threads active' FROM Metric WHERE `entity.guid` = '{{entity.id}}' TIMESERIES auto",
          "offset" : 0
        }
      }
    } ]
  }
}